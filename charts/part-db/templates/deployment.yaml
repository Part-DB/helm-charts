apiVersion: {{ template "app.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "app.fullname" . }}
  labels: {{- include "app.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels: {{- include "app.matchLabels" . | nindent 6 }}
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1 # as an absolute number of replicas
      maxUnavailable: 100% # as % of replicas
    type: RollingUpdate  
  template:
    metadata:
      labels: {{- include "app.labels" . | nindent 8 }}
      annotations:
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      containers:
      - name: part-db
        {{- with .Values.image }}
        image: "{{ .registry }}/{{ .repository }}:{{ .tag }}"
        imagePullPolicy: {{ .pullPolicy | quote }}
        {{- end }}
        envFrom:
        - secretRef:
            name: {{ template "app.fullname" . }}-config
        {{- if .Values.extraVars }}
        env:
          {{- toYaml .Values.extraVars | nindent 10 }}
        {{- end }}
        ports:
        - name: http
          containerPort: 80
#        livenessProbe:
#          httpGet:
#            path: /healthz
#            port: http
#          initialDelaySeconds: 120
#          timeoutSeconds: 5
#        readinessProbe:
#          httpGet:
#            path: /healthz
#            port: http
#          initialDelaySeconds: 5
#          timeoutSeconds: 1
        volumeMounts:
        - name: pub
          mountPath: /var/www/html/uploads
          subPath: uploads
        - name: pub
          mountPath: /var/www/html/public/media
          subPath: public_media
      volumes:
        - name: pub
          persistentVolumeClaim:
            claimName: {{ template "app.fullname" . }}      
